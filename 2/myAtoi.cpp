/*
字符串转换整数 (atoi)

请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。

函数 myAtoi(string s) 的算法如下：

    1.读入字符串并丢弃无用的前导空格
    2.检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
    3.读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
    4.将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
    5.如果整数数超过 32 位有符号整数范围 [?231,  231 ? 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 ?231 的整数应该被固定为 ?231 ，大于 231 ? 1 的整数应该被固定为 231 ? 1 。
    返回整数作为最终结果。

注意：

    本题中的空白字符只包括空格字符 ' ' 。
    除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。
*/
 /*题解：这道题在思考后，认为没有特殊的解法，只能依据题意，分步判断 字符串，将字符串转换为 有符号整数，
 * 1，丢弃无用的前导空格，判断字符为 空格则将下表往右移 
 * 2 检查下一个字符（假设还未到字符末尾）为正还是负号， 用1、-1代表正负，默认符号为正 ，判断空格之后的第一个字符，若为符号 ，判断正负 
 * 3 读入下一个字符，通过ascall码判断是否是数字，若非数字则结束字符读入。 
 * 4 将读入的字符的ascall码 - ‘0’ ，得到对应的整数值，若其下一位为 数字字符，则将本 数字进位
 * 5 每进行一次第四步，就判断得到的结果是否在范围内，若不在范围内则取对应值
 * 6 得到 无符号的整数后，根据之前获取的符号，转换为 有符号整数
 */
#include <iostream>
#include <string>
#include <cmath>

using namespace std;

class Solution {
public:
    int myAtoi(string s) {
        int sign = 1;
        long tmp = 0;
        int i = 0;

        while(s[i] == ' ')  ++i;    //丢弃无用的前导空格

        if(s[i] == '+' || s[i] == '-')    //确定是负数还是正数
        {
            s[i]=='+' ? sign=1 : sign=-1; 
            i++; 
        }

        while(s[i] >= '0' && s[i] <= '9')   //检查输入是否是数字对应的asscal码
        {
            tmp = tmp*10 + (s[i++] - '0');  
            if(tmp < pow(-2,31) || tmp > (pow(2,31)-1))//保证整数保持在范围内
                return sign == -1 ? pow(-2,31) : (pow(2,31)-1);
        }
        tmp =(int)tmp;
        return tmp * sign;//转换正负
    }
};

int  main()
{
	Solution *solution = new Solution();
	cout<<solution->myAtoi("   -42");
} 
